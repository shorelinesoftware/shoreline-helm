apiVersion: apps/v1
kind: {{ .Values.agent.resource.kind }}
metadata:
  labels:
    k8s-app: {{ .Values.global.name }}
  name: {{ .Values.global.name }}
  namespace: {{ tpl .Values.global.namespace . }}
spec:
  {{- if eq .Values.agent.resource.kind "Deployment" }}
  replicas: {{ .Values.agent.resource.replicas }}
  {{- end }}
  {{- if eq .Values.agent.resource.kind "StatefulSet" }}
  {{- if ne .Values.agent.resource.hpa "enable" }}
  replicas: {{ .Values.agent.resource.replicas }}
  {{- end }}
  serviceName: {{ .Values.global.name }}
  {{- end }}
  selector:
    matchLabels:
      app: {{ .Values.global.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.global.name }}
        {{- with .Values.agent.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- if .Values.agent.resource.podAnnotations }}
      annotations:
      {{ toYaml .Values.agent.resource.podAnnotations | nindent 8 }}
      {{- end }}
    spec:
    {{- if eq .Values.agent.resource.kind "StatefulSet" }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
                - key: "app"
                  operator: In
                  values:
                  - {{ .Values.global.name }}
            topologyKey: "kubernetes.io/hostname"
    {{- end }}
    {{- if eq .Values.agent.resource.hostAction "enable" }}
      initContainers:
        - image: ubuntu:20.04
          name: node-initializer
          command: ["/scripts/entrypoint.sh"]
          env:
            - name: ROOT_MOUNT_DIR
              value: /root
            - name: NODE_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
          securityContext:
            privileged: true
          volumeMounts:
            - name: root-mount
              mountPath: /root
            - name: entrypoint
              mountPath: /scripts
    {{- end }}
      containers:
        - env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: BACKEND_ADDRESS
              value: {{ .Values.global.customer_endpoint }}
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: NODE_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: SSH_USERNAME
              value: {{ .Values.global.name }}
            - name: SSH_PORT
              value: "22"
            - name: K8S_CACERT_PATH
              value: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            - name: K8S_TOKEN_PATH
              value: /var/run/secrets/kubernetes.io/serviceaccount/token
            - name: SECRET
              valueFrom:
                secretKeyRef:
                  name: customer-secret
                  key: customer-secret
            - name: SECRETS_DIRECTORY
              value: "/agent/secrets"
            - name: CUSTOMER_ID
              value: {{ .Values.global.customer_id }}
            {{- $elixirLoggerLevelExists := false }}
            {{- range $obj := .Values.agent.resource.environmentVariables }}
              {{- if eq $obj.name "ELIXIR_LOGGER_LEVEL" }}
                {{- $elixirLoggerLevelExists = true }}
              {{- end }}
            {{- end }}
            {{- if eq $elixirLoggerLevelExists false  }}
            - name: ELIXIR_LOGGER_LEVEL
              value: "error"
            {{- end }}
            {{- if .Values.agent.resource.environmentVariables }}
            {{ toYaml .Values.agent.resource.environmentVariables | nindent 12 }}
            {{- end }}
          image: >-
            {{ .Values.agent.resource.image }}:{{  .Values.agent.resource.tag }}
          name: {{ .Values.global.name }}
          readinessProbe:
            exec:
              command:
                - "/agent/bin/health_check.sh"
                - "/agent/healthy"
                - "10"
            initialDelaySeconds: 180
            periodSeconds: 120
            timeoutSeconds: 60
          livenessProbe:
            exec:
              command:
                - "/agent/bin/health_check.sh"
                - "/agent/healthy"
                - "10"
            initialDelaySeconds: 180
            periodSeconds: 120
            timeoutSeconds: 60
          {{- if eq .Values.global.internal "enable" }}
          lifecycle:
            postStart:
              exec:
                command:
                - /bin/sh
                - -c
                - cp /agent/secrets/ca_cert.crt /usr/local/share/ca-certificates/ca-local.crt && update-ca-certificates;
          {{- end }}
          ports:
            - containerPort: 5051
              name: agent-opservice
          resources:
            limits:
              cpu: {{ .Values.agent.resource.resources.limits.cpu | quote }}
              memory: {{ .Values.agent.resource.resources.limits.memory | quote }}
            requests:
              cpu: {{ .Values.agent.resource.resources.requests.cpu | quote }}
              memory: {{ .Values.agent.resource.resources.requests.memory | quote }}
          {{- $varlog := .Values.agent.resource.volumeMounts.mountPaths.varlog }}
          {{- $varlibdockercontainers := .Values.agent.resource.volumeMounts.mountPaths.varlibdockercontainers }}
          {{- $caPemstore := .Values.agent.resource.volumeMounts.mountPaths.caPemstore }}
          {{- $hostSshVolume := .Values.agent.resource.volumeMounts.mountPaths.hostSshVolume }}
          {{- $scraperConfig := .Values.agent.resource.volumeMounts.mountPaths.scraperConfig }}
          {{- $onpremDataVolume  := .Values.agent.resource.volumeMounts.mountPaths.bareMetalDataVolume }}
          {{- if or (ne $varlog "disable") (ne $varlibdockercontainers "disable") (ne $caPemstore "disable") (ne $hostSshVolume "disable") (ne $scraperConfig "disable") (ne $onpremDataVolume "disable") }}
          volumeMounts:
            {{- if ne $varlog "disable" }}
            - mountPath: {{ $varlog }}
              name: varlog
            {{- end }}
            {{- if ne $varlibdockercontainers "disable" }}
            - mountPath: {{ $varlibdockercontainers }}
              name: varlibdockercontainers
              readOnly: true
            {{- end }}
            {{- if .Values.global.certificate }}
              {{- if ne $caPemstore "disable" }}
            - mountPath: {{ $caPemstore }}
              name: ca-pemstore
              readOnly: false
              subPath: ca.pem
              {{- end }}
            {{- end }}
            {{- if ne $hostSshVolume "disable" }}
            - mountPath: {{ $hostSshVolume }}
              name: host-ssh-volume
              readOnly: true
            {{- end }}
            {{- if ne $scraperConfig "disable" }}
            - mountPath: {{ $scraperConfig }}
              name: scraper-config
              subPath: scraper.yml
            {{- end }}
            {{- if ne $onpremDataVolume "disable" }}
            - mountPath: {{ $onpremDataVolume }}
              name: onprem-data-volume
              readOnly: false
            {{- end }}
            {{- if .Values.agent.serviceaccount.runAsNonRoot }}
            - mountPath: /agent/secrets
              name: cache-volume
          securityContext:
            runAsUser: 2000
            {{- end }}
          {{- end }}
      {{- if .Values.agent.priorityClassName }}
      priorityClassName: {{ .Values.agent.priorityClassName }}
      {{- end }}
      {{- if .Values.agent.resource.imageCredentials }}
      imagePullSecrets:
        - name: {{ .Values.global.name }}-agent
      {{- end }}
      serviceAccountName: {{ tpl .Values.global.namespace . }}-sa
      {{- if .Values.agent.resource.nodeSelector }}
      nodeSelector:
      {{ toYaml .Values.agent.resource.nodeSelector | nindent 8 }}
      {{- end }}
      {{- if .Values.agent.resource.tolerations }}
      tolerations:
      {{ toYaml .Values.agent.resource.tolerations | nindent 6 }}
      {{- end }}
      terminationGracePeriodSeconds: 30
      volumes:
        {{- if ne $varlog "disable" }}
        - hostPath:
            path: {{ $varlog }}
          name: varlog
        {{- end }}
        {{- if ne $varlibdockercontainers "disable" }}
        - hostPath:
            path: {{ $varlibdockercontainers }}
          name: varlibdockercontainers
        {{- end }}
        {{- if .Values.global.certificate }}
        - configMap:
            name: ca-pemstore
          name: ca-pemstore
        {{- end }}
        {{- if ne $hostSshVolume "disable" }}
        - name: host-ssh-volume
          hostPath:
            path: /home/{{ .Values.global.name }}/.ssh
            type: DirectoryOrCreate
        {{- end }}
        - name: scraper-config
          configMap:
            name: scraper-config
        {{- if .Values.agent.serviceaccount.runAsNonRoot }}
        - name: cache-volume
          emptyDir: {}
        {{- end }}
        {{- if ne $onpremDataVolume "disable" }}
        - name: onprem-data-volume
          hostPath:
            path: {{ $onpremDataVolume }}
            type: DirectoryOrCreate
        {{- end }}
        {{- if eq .Values.agent.resource.hostAction "enable" }}
        - name: root-mount
          hostPath:
            path: /
        - name: entrypoint
          configMap:
            name: entrypoint
            defaultMode: 0744
        {{- end }}
      {{- if eq .Values.agent.resource.kind "Deployment" }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app: {{ .Values.global.name }}
            topologyKey: kubernetes.io/hostname
      {{- end }}
  {{- if eq .Values.agent.resource.kind "DaemonSet" }}
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 10
    type: RollingUpdate
  {{- end }}
  